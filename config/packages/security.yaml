security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
        App\Entity\User: bcrypt

    providers:
        # in_memory: { memory: ~ }
        database:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api
            stateless: true #no guarda cookies solo devuelve el token
            anonymous: true
            json_login:
                check_path: /api/login_check
                #success_handler: lexik_jwt_authentication.handler.authentication_success
                success_handler: App\Security\Http\Authentication\AuthenticationSuccessHandler
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            guard:
                authenticators:
                    #- lexik_jwt_authentication.jwt_token_authenticator
                    - App\Security\TokenAuthenticator
            user_checker: App\Security\UserEnabledChecker
        admin: # para EasyAdmin
            pattern: ^/
            anonymous: true
            form_login:
                check_path: security_login # define in AdminSecurityController
                login_path: security_login # define in AdminSecurityController
                default_target_path: easyadmin
                use_referer: true
            logout:
                path: security_logout # define in AdminSecurityController
                target: security_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login,     roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin,     roles: [ROLE_SUPER_ADMIN, ROLE_ADMIN ]}
        - { path: ^/api,       roles: IS_AUTHENTICATED_ANONYMOUSLY }
    role_hierarchy:
        ROLE_USER: ROLE_VIEWER
        ROLE_ADMIN: [ROLE_USER, ROLE_VIEWER]
        ROLE_SUPER_ADMIN: ROLE_ADMIN
